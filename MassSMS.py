import asyncio
from telethon import events, tl
from .. import loader, utils
import re
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.channels import JoinChannelRequest

class MassSMS(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""

    strings = {"name": "MassSMS"}

    def __init__(self):
        self.chats = []
        self.interval = 60
        self.is_mass = False
        self.mass_task = None
        self.mass_message = None

    async def addchatcmd(self, message):
        """–î–æ–±–∞–≤—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥—è–ª —Ä–∞—Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .addchat <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ @username>"""
        link = utils.get_args_raw(message)

        if not link:
            await message.reply("–¢—ã –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º")
            return

        try:
            if link.startswith('@'):
                chat = await self.client.get_entity(link)
            elif 't.me/' in link or 'telegram.me/' in link:
                username = re.search(r't\.me/(\w+)', link)
                if username:
                    chat = await self.client.get_entity(username.group(1))
                else:
                    invite_hash = re.search(r't\.me/joinchat/([a-zA-Z0-9_-]+)', link)
                    if invite_hash:
                        chat = await self.client(ImportChatInviteRequest(invite_hash.group(1)))
                    else:
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
            else:
                chat = await self.client.get_entity(link)

            if isinstance(chat, (tl.types.Chat, tl.types.Channel)) and not chat.broadcast:
                self.chats.append({"id": chat.id, "title": chat.title})
                await message.reply(f"–ß–∞—Ç '{chat.title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫! üéâ")
            else:
                await message.reply("–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–æ –Ω–µ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞! üôÖ‚Äç‚ôÇÔ∏è")

        except ValueError as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}")

    async def delchatcmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .delchat <–Ω–∞–∑–≤–∞–Ω–∏–µ>"""
        title = utils.get_args_raw(message)
        for chat in self.chats:
            if chat['title'].lower() == title.lower():
                self.chats.remove(chat)
                await message.reply(f"–ß–∞—Ç '{title}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
                return
        await message.reply("–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")

    async def setintcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .setint <—Å–µ–∫—É–Ω–¥—ã>"""
        try:
            self.interval = int(utils.get_args_raw(message))
            await message.reply(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {self.interval} —Å–µ–∫—É–Ω–¥!")
        except:
            await message.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ")

    async def chatlistcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.chats:
            await message.reply("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        else:
            chat_list = "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n" + "\n".join([chat['title'] for chat in self.chats])
            await message.reply(chat_list)

    async def stopmasscmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        if self.mass_task:
            self.mass_task.cancel()
            self.is_mass = False
            await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –∏ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    async def startmasscmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        if not self.is_mass:
            self.is_mass = True
            self.mass_task = asyncio.create_task(self.mass_loop())
            await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        else:
            await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    async def mass_loop(self):
        while self.is_mass:
            for chat in self.chats:
                try:
                    await self.client.send_message(chat['id'], self.mass_message)
                except Exception as e:
                    print(f"–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat['title']}: {str(e)}")
            await asyncio.sleep(self.interval)

    async def setsmscmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .setsms <—Ç–µ–∫—Å—Ç>"""
        new_message = utils.get_args_raw(message)
        if new_message:
            self.mass_message = new_message
            await message.reply(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: \n {self.mass_message}")
        else:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

    async def client_ready(self, client, db):
        self.client = client
